package models

type KernelType int
type KernelSize int

const (
	BoxBlur KernelType = iota
	MotionBlur
	Sharpen
	Emboss
	EdgeDetectionHorizontal
	EdgeDetectionVertical
	Outline
)

const (
	Three KernelSize = 3
	Five             = 5
	Seven            = 7
	Nine             = 9
)

func GenerateKernel(kernelType KernelType, kernelSize KernelSize) [][]float32 {
	var kernel [][]float32

	switch kernelType {
	case BoxBlur:
		switch kernelSize {
		case Three:
			kernel = [][]float32{
				{1.0 / 9.0, 1.0 / 9.0, 1.0 / 9.0},
				{1.0 / 9.0, 1.0 / 9.0, 1.0 / 9.0},
				{1.0 / 9.0, 1.0 / 9.0, 1.0 / 9.0},
			}
		case Five:
			kernel = [][]float32{
				{1.0 / 25.0, 1.0 / 25.0, 1.0 / 25.0, 1.0 / 25.0, 1.0 / 25.0},
				{1.0 / 25.0, 1.0 / 25.0, 1.0 / 25.0, 1.0 / 25.0, 1.0 / 25.0},
				{1.0 / 25.0, 1.0 / 25.0, 1.0 / 25.0, 1.0 / 25.0, 1.0 / 25.0},
				{1.0 / 25.0, 1.0 / 25.0, 1.0 / 25.0, 1.0 / 25.0, 1.0 / 25.0},
				{1.0 / 25.0, 1.0 / 25.0, 1.0 / 25.0, 1.0 / 25.0, 1.0 / 25.0},
			}
		case Seven:
			kernel = [][]float32{
				{1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0},
				{1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0},
				{1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0},
				{1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0},
				{1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0},
				{1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0},
				{1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0, 1.0 / 49.0},
			}
		case Nine:
			kernel = [][]float32{
				{1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0},
				{1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0},
				{1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0},
				{1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0},
				{1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0},
				{1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0},
				{1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0},
				{1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0},
				{1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0, 1.0 / 81.0},
			}
		}
		break
	case MotionBlur:
		switch kernelSize {
		case Three:
			kernel = [][]float32{
				{1.0 / 3.0, 0, 0},
				{0, 1.0 / 3.0, 0},
				{0, 0, 1.0 / 3.0},
			}
		case Five:
			kernel = [][]float32{
				{1.0 / 5.0, 0, 0, 0, 0},
				{0, 1.0 / 5.0, 0, 0, 0},
				{0, 0, 1.0 / 5.0, 0, 0},
				{0, 0, 0, 1.0 / 5.0, 0},
				{0, 0, 0, 0, 1.0 / 5.0},
			}
		case Seven:
			kernel = [][]float32{
				{1.0 / 7.0, 0, 0, 0, 0, 0, 0},
				{0, 1.0 / 7.0, 0, 0, 0, 0, 0},
				{0, 0, 1.0 / 7.0, 0, 0, 0, 0},
				{0, 0, 0, 1.0 / 7.0, 0, 0, 0},
				{0, 0, 0, 0, 1.0 / 7.0, 0, 0},
				{0, 0, 0, 0, 0, 1.0 / 7.0, 0},
				{0, 0, 0, 0, 0, 0, 1.0 / 7.0},
			}
		case Nine:
			kernel = [][]float32{
				{1.0 / 9.0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 1.0 / 9.0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 1.0 / 9.0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 1.0 / 9.0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 1.0 / 9.0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 1.0 / 9.0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 1.0 / 9.0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 1.0 / 9.0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 1.0 / 9.0},
			}
		}
		break
	case Sharpen:
		switch kernelSize {
		case Three:
			kernel = [][]float32{
				{+0, -1, +0},
				{-1, +5, -1},
				{+0, -1, +0},
			}
		case Five:
			kernel = [][]float32{
				{+0, +0, -1, +0, +0},
				{+0, +0, -1, +0, +0},
				{-1, -1, +9, -1, -1},
				{+0, +0, -1, +0, +0},
				{+0, +0, -1, +0, +0},
			}
		case Seven:
			kernel = [][]float32{
				{+0, +0, +0, -1, +0, +0, +0},
				{+0, +0, +0, -1, +0, +0, +0},
				{+0, +0, +0, -1, +0, +0, +0},
				{-1, -1, -1, +13, -1, -1, -1},
				{+0, +0, +0, -1, +0, +0, +0},
				{+0, +0, +0, -1, +0, +0, +0},
				{+0, +0, +0, -1, +0, +0, +0},
			}
		case Nine:
			kernel = [][]float32{
				{+0, +0, +0, +0, -1, +0, +0, +0, +0},
				{+0, +0, +0, +0, -1, +0, +0, +0, +0},
				{+0, +0, +0, +0, -1, +0, +0, +0, +0},
				{+0, +0, +0, +0, -1, +0, +0, +0, +0},
				{-1, -1, -1, -1, +17, -1, -1, -1, -1},
				{+0, +0, +0, +0, -1, +0, +0, +0, +0},
				{+0, +0, +0, +0, -1, +0, +0, +0, +0},
				{+0, +0, +0, +0, -1, +0, +0, +0, +0},
				{+0, +0, +0, +0, -1, +0, +0, +0, +0},
			}
		}
		break
	case Emboss:
		switch kernelSize {
		case Three:
			kernel = [][]float32{
				{-2, -1, +0},
				{-1, +1, +1},
				{+0, +1, +2},
			}
		case Five:
			kernel = [][]float32{
				{-2, +0, -1, +0, +0},
				{+0, -2, -1, +0, +0},
				{-1, -1, +1, +1, +1},
				{+0, +0, +1, +2, +0},
				{+0, +0, +1, +0, +2},
			}
		case Seven:
			kernel = [][]float32{
				{-2, +0, +0, -1, +0, +0, +0},
				{+0, -2, +0, -1, +0, +0, +0},
				{+0, +0, -2, -1, +0, +0, +0},
				{-1, -1, -1, +1, +1, +1, +1},
				{+0, +0, +0, +1, +2, +0, +0},
				{+0, +0, +0, +1, +0, +2, +0},
				{+0, +0, +0, +1, +0, +0, +2},
			}
		case Nine:
			kernel = [][]float32{
				{-2, +0, +0, +0, -1, +0, +0, +0, +0},
				{+0, -2, +0, +0, -1, +0, +0, +0, +0},
				{+0, +0, -2, +0, -1, +0, +0, +0, +0},
				{+0, +0, +0, -2, -1, +0, +0, +0, +0},
				{-1, -1, -1, -1, +1, +1, +1, +1, +1},
				{+0, +0, +0, +0, +1, +2, +0, +0, +0},
				{+0, +0, +0, +0, +1, +0, +2, +0, +0},
				{+0, +0, +0, +0, +1, +0, +0, +2, +0},
				{+0, +0, +0, +0, +1, +0, +0, +0, +2},
			}
		}
		break
	case EdgeDetectionHorizontal:
		kernel = [][]float32{
			{+1, +0, -1},
			{+2, +0, -2},
			{+1, +0, -1},
		}
		break
	case EdgeDetectionVertical:
		kernel = [][]float32{
			{+1, +2, +1},
			{+0, +0, +0},
			{-1, -2, -1},
		}
		break
	case Outline:
		kernel = [][]float32{
			{-1, -1, -1},
			{-1, +8, -1},
			{-1, -1, -1},
		}
		break
	}

	return kernel
}
